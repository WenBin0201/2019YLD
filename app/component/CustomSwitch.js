import React from 'react'import PropTypes from 'prop-types'import { TouchableWithoutFeedback, StyleSheet, Animated } from 'react-native'import { COLOR_EC6941, COLOR_SECOND_COLOR } from '../constant/ColorConstant'export default class CustomSwitch extends React.Component {    static propTypes = {        style: PropTypes.object,        value: PropTypes.bool,        leftText: PropTypes.string,        rightText: PropTypes.string,        leftColor: PropTypes.string,        rightColor: PropTypes.string,        leftbg: PropTypes.string,        rightbg: PropTypes.string,        onChangeValue: PropTypes.func    }    static defaultProps = {        value: false,        leftText: '关',        rightText: '开',        leftColor: COLOR_SECOND_COLOR,        rightColor: COLOR_EC6941,        leftbg: 'rgb(210,210,210)',        rightbg: 'rgb(140,176,201)',        onChangeValue: f => f    }    constructor(props) {        super(props)        this.state = {            textWidth: 0,            textHeight: 0,            animateValue: new Animated.Value(0)        }    }    _onLayout = ({ nativeEvent: { layout: { x, y, width, height } } }) => {        const { value } = this.props        this.setState({            textWidth: width / 2,            textHeight: height,            animateValue: value ? new Animated.Value(1) : new Animated.Value(0)        })    }    _onPress = () => {        if ( this.props.value )            Animated.timing(this.state.animateValue, {                toValue: 0,                duration: 500            }).start(() => {                if ( this.props.onChangeValue ){                    this.props.onChangeValue(false)                }            })        else            Animated.timing(this.state.animateValue, {                toValue: 1,                duration: 500            }).start(() => {                if ( this.props.onChangeValue ){                    this.props.onChangeValue(true)                }            })    }    render(): React.ReactNode {        const { textWidth, animateValue, textHeight } = this.state        const { value, leftText, rightText, leftColor, rightColor, leftbg, rightbg } = this.props        return (            <TouchableWithoutFeedback                style={[ styles.container, this.props.style ]}                onLayout={this._onLayout}                onPress={this._onPress}>                <Animated.View style={{                    flex: 1,                    backgroundColor: animateValue.interpolate({                        inputRange: [ 0, 1 ],                        outputRange: [ leftbg, rightbg ]                    })                }}>                    <Animated.Text style={{                        width: textWidth,                        height: textHeight,                        fontSize: 20,                        textAlign: 'center',                        textAlignVertical: 'center',                        backgroundColor: animateValue.interpolate({                            inputRange: [ 0, 1 ],                            outputRange: [ leftColor, rightColor ]                        }),                        marginLeft: animateValue.interpolate({                            inputRange: [ 0, 1 ],                            outputRange: [ 0, textWidth ]                        }),                        color: 'white',                        borderRadius: 6                    }}>{value ? rightText : leftText}</Animated.Text>                </Animated.View>            </TouchableWithoutFeedback>        )    }}const styles = StyleSheet.create({    container: {        flexDirection: 'row'    }})