import React from 'react'import { View, StyleSheet, Dimensions, Text, TouchableOpacity, Image, FlatList, PixelRatio } from 'react-native'import { COLOR_F1F1F1 } from '../../constant/ColorConstant'import { WIDTH_RATIO } from '../../constant/StaticDataDef'import PublicStyle from '../../style/PublicStyle'import Button from '../Button'import FormCell from '../FormCell'const testData = require('../../page/test/TestData_PanDianDetailsBoxContainer.json')const { width, height } = Dimensions.get('window')const containerWidth = 2 * width / 3const containerHeight = 2 * height / 3const heads: Array = require('./PanDianDetailsListHead')const widths = heads.map(({ width }) => width)export default class PanDianDetailsBoxContainer extends React.Component {    _renderHead = (        <View style={PublicStyle.view_top}>            <Text style={PublicStyle.text_FFF_20}>盘点信息详单</Text>            <TouchableOpacity onPress={() => {                if ( this.props.destroy ){                    this.props.destroy()                } else {                    this.props.navigation.goBack()                }            }} style={PublicStyle.view_top_right}>                <Image source={require('../../image/login/shiftRecord-cross.png')}                       resizeMode={'contain'}                       style={{ width: 30, height: 30 }}/>            </TouchableOpacity>        </View>    )    _renderListHead = () => {        const headIItem = heads.map(({ text, width }) => (            <FormCell                key={() => text}                customStyle={{ flex: width, ...styles.headItem }}            >{text}</FormCell>        ))        return (            <View style={styles.listHeadContainer}>                {headIItem}            </View>        )    }    /**     *     * @param k0     * @param k1     * @param k2     * @param k3     * @param k4     * @param k5     * @param k6     * @param k7     * @param k8     * @param k9     * @param k10     * @param k11     * @param k12     * @param borderTop  用于判断是否有top border     * @returns {*}     * @private     */    _renderItem = ({ item: { k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, borderTop } }) => {        const values = [ k0, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12 ]        let customStyle = {}        if ( borderTop ){            customStyle = {                borderTopColor: 'black',                borderTopWidth: 1 / PixelRatio.get()            }        }        const items = values.map((text, index) => {            return (                <FormCell                    key={() => text}                    customStyle={{ flex: widths[ index ], ...styles.listItem }}                >{text}</FormCell>            )        })        return (            <View style={[ styles.listHeadContainer, styles.listItemContainer, customStyle ]}>                {items}            </View>        )    }    _renderList = () => {        return (            <FlatList                data={testData}                renderItem={this._renderItem}                keyExtractor={(item, index) => `item_${index}`}            />        )    }    _renderTotal = () => {        return this._renderItem({            item: {                k0: '-',                k1: '总计',                k2: '-',                k3: '-',                k4: '-',                k5: '-',                k6: '-',                k7: '15',                k8: '12',                k9: '-3',                k10: '206.25',                k11: '165',                k12: '-41.26',                borderTop: true            }        })    }    _renderContent = () => {        return (            <View style={styles.contentContainer}>                {this._renderListHead()}                {this._renderList()}                {this._renderTotal()}            </View>        )    }    _renderBottom = () => {        return (            <View style={styles.bottomContainer}>                <Button                    text={'导出EXCEL至邮箱'}                    borderRadius={8}                    backgroundColor={'rgb(231,76,57)'}                    width={122 * WIDTH_RATIO}                    height={27 * WIDTH_RATIO}/>            </View>        )    }    render(): React.ReactNode {        return (            <View style={styles.container}>                {this._renderHead}                {this._renderContent()}                {this._renderBottom()}            </View>        )    }}const styles = StyleSheet.create({    container: {        width: containerWidth,        height: containerHeight,        alignItems: 'stretch',        backgroundColor: 'white'    },    contentContainer: {        flex: 1,        alignItems: 'stretch',        marginTop: 5 * WIDTH_RATIO    },    headItem: {        borderRightColor: 'white',        backgroundColor: 'rgb(62,132,146)',        color: 'white',        height: 22 * WIDTH_RATIO    },    listHeadContainer: {        flexDirection: 'row'    },    listItemContainer: {        borderBottomWidth: 1 / PixelRatio.get(),        borderBottomColor: 'black'    },    listItem: {        borderRightColor: 'black',        height: 22 * WIDTH_RATIO    },    bottomContainer: {        padding: 5 * WIDTH_RATIO,        flexDirection: 'row',        justifyContent: 'flex-end',        backgroundColor: COLOR_F1F1F1    }})